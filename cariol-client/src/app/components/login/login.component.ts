import { Component, OnInit, EventEmitter, Output } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-login',
  standalone: false,
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent implements OnInit {
  @Output() close = new EventEmitter<void>();
  @Output() switchPopup = new EventEmitter<string>();

  loginForm!: FormGroup;
  submitted = false;
  loading = false;
  errorMessage = '';
  apiUrl = 'http://localhost:3002/auth'; // ‚úÖ URL API Backend

  constructor(
    private formBuilder: FormBuilder,
    private http: HttpClient,
    private router: Router
  ) {}

  ngOnInit() {
    this.loginForm = this.formBuilder.group({
      phone: ['', [Validators.required, Validators.pattern("^[0-9]{10,11}$")]],
      password: ['', [Validators.required, Validators.minLength(6)]]
    });
  }

  get f() { return this.loginForm.controls; }

  onSubmit() {
    this.submitted = true;
    this.errorMessage = '';

    if (this.loginForm.invalid) {
      return;
    }

    this.loading = true;

    const loginData = {
      phone: this.loginForm.value.phone.trim(),
      password: this.loginForm.value.password.trim()
    };

    console.log("üîç Ki·ªÉm tra t√†i kho·∫£n tr∆∞·ªõc khi ƒëƒÉng nh·∫≠p:", loginData.phone);

    // üü¢ Ki·ªÉm tra xem t√†i kho·∫£n c√≥ t·ªìn t·∫°i kh√¥ng tr∆∞·ªõc khi g·ª≠i API login
    this.http.post(`${this.apiUrl}/check-user`, { phone: loginData.phone }).subscribe({
      next: (response: any) => {
        console.log("üîç Ph·∫£n h·ªìi t·ª´ API check-user:", response);

        if (!response.exists) {
          console.error("‚ùå T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i!");
          this.errorMessage = "T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω!";
          this.loading = false;
          return;
        }

        console.log("‚úÖ T√†i kho·∫£n t·ªìn t·∫°i, ti·∫øp t·ª•c ƒëƒÉng nh·∫≠p...");

        // üü¢ N·∫øu t√†i kho·∫£n t·ªìn t·∫°i, ti·∫øp t·ª•c g·ª≠i API login
        this.http.post(`${this.apiUrl}/login`, loginData).subscribe({
          next: (response: any) => {
            console.log("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng! API tr·∫£ v·ªÅ:", response);
            localStorage.setItem('token', response.token);
            localStorage.setItem('role', response.role);
            alert('üéâ ƒêƒÉng nh·∫≠p th√†nh c√¥ng! Ch√†o m·ª´ng b·∫°n.');
            // ‚úÖ T·ª± ƒë·ªông ƒë√≥ng popup tr∆∞·ªõc khi chuy·ªÉn h∆∞·ªõng
            this.closePopup();

            // ‚úÖ D√πng setTimeout ƒë·ªÉ tr√°nh l·ªói UI khi ƒë√≥ng popup v√† chuy·ªÉn trang
            setTimeout(() => {
              this.router.navigate(['/dashboard']);
            }, 500);

          },
          error: (error) => {
            console.error("‚ùå L·ªói ƒëƒÉng nh·∫≠p:", error);
            this.errorMessage = "S·ªë ƒëi·ªán tho·∫°i ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!";
            this.loading = false;
          }
        });

      },
      error: (error) => {
        console.error("‚ùå L·ªói ki·ªÉm tra t√†i kho·∫£n t·ª´ API:", error);
        this.errorMessage = "L·ªói ki·ªÉm tra t√†i kho·∫£n. Vui l√≤ng th·ª≠ l·∫°i!";
        this.loading = false;
      }
    });
  }

  switchTo(type: string) {
    this.switchPopup.emit(type);
  }

  closePopup() {
    this.close.emit();
  }
}
