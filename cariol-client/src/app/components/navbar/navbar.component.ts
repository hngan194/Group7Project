import { Component, OnInit, NgZone } from '@angular/core';
import { ProductService } from '../../services/product.service';
import { PopupService } from '../../services/popup.service';
import { AuthService } from '../../services/auth.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-navbar',
  standalone: false,
  templateUrl: './navbar.component.html',
  styleUrls: ['./navbar.component.css']
})
export class NavbarComponent implements OnInit {
  categories: string[] = [];
  showCategories: boolean = false; // ƒêi·ªÅu khi·ªÉn dropdown s·∫£n ph·∫©m

  isLoggedIn: boolean = false;
  username: string = '';
  menuVisible: boolean = false; // ƒêi·ªÅu khi·ªÉn hi·ªÉn th·ªã menu x·ªï xu·ªëng

  constructor(
    public popupService: PopupService,
    private productService: ProductService,
    private authService: AuthService,
    private router: Router,
    private ngZone: NgZone // ‚úÖ Inject NgZone ƒë·ªÉ force update UI
  ) {}

  ngOnInit(): void {
    // L·∫•y danh m·ª•c s·∫£n ph·∫©m khi component ƒë∆∞·ª£c kh·ªüi t·∫°o
    this.productService.getCategories().subscribe(categories => {
      this.categories = categories;
    });

    // Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p khi component kh·ªüi ch·∫°y
    this.checkLoginStatus();

    // L·∫Øng nghe thay ƒë·ªïi tr·∫°ng th√°i ƒëƒÉng nh·∫≠p t·ª´ AuthService
    this.authService.isLoggedIn$.subscribe(status => {
      this.ngZone.run(() => { // ‚úÖ ƒê·∫£m b·∫£o UI c·∫≠p nh·∫≠t khi gi√° tr·ªã thay ƒë·ªïi
        this.isLoggedIn = status;
        if (this.isLoggedIn) {
          this.username = this.authService.userValue?.last_name || '';
        }
      });
    });
  }

  checkLoginStatus() {
    const storedUser = localStorage.getItem('user');

    console.log("üîπ Ki·ªÉm tra d·ªØ li·ªáu user t·ª´ localStorage:", storedUser); // ‚úÖ Debug d·ªØ li·ªáu

    if (!storedUser || storedUser === "undefined" || storedUser === "null") {
        console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu user h·ª£p l·ªá!");
        this.isLoggedIn = false;
        this.username = '';
        return;
    }

    try {
        const parsedUser = JSON.parse(storedUser);
        if (parsedUser && parsedUser.last_name) {
            this.isLoggedIn = true;
            this.username = parsedUser.last_name;
            console.log("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng, username:", this.username);
        } else {
            console.warn("‚ö†Ô∏è D·ªØ li·ªáu user kh√¥ng h·ª£p l·ªá:", parsedUser);
            this.isLoggedIn = false;
            this.username = '';
        }
    } catch (error) {
        console.error("‚ùå L·ªói parse JSON t·ª´ localStorage:", error);
        localStorage.removeItem('user'); // X√≥a d·ªØ li·ªáu l·ªói
        this.isLoggedIn = false;
        this.username = '';
    }
}



  // Toggle menu x·ªï xu·ªëng khi hover ho·∫∑c click v√†o icon
  toggleMenu() {
    this.menuVisible = !this.menuVisible;
  }

  // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang profile
  goToProfile() {
    this.router.navigate(['/edit-profile']);
  }

  // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang thay ƒë·ªïi m·∫≠t kh·∫©u
  goToChangePassword() {
    this.router.navigate(['/change-password']);
  }

  // ‚úÖ ƒêƒÉng xu·∫•t ng∆∞·ªùi d√πng v√† c·∫≠p nh·∫≠t UI
  logout() {
    console.log("üîπ ƒêƒÉng xu·∫•t ng∆∞·ªùi d√πng...");
    localStorage.removeItem('token'); // X√≥a token
    localStorage.removeItem('user'); // X√≥a th√¥ng tin user

    this.ngZone.run(() => {
      this.isLoggedIn = false;
      this.username = '';
      this.menuVisible = false;
    });

    this.router.navigate(['/']);
  }

  // ‚úÖ X·ª≠ l√Ω s·ª± ki·ªán ƒëƒÉng nh·∫≠p th√†nh c√¥ng t·ª´ login component
  onLoginSuccess() {
    console.log("üîπ ƒêƒÉng nh·∫≠p th√†nh c√¥ng, c·∫≠p nh·∫≠t tr·∫°ng th√°i...");
    this.ngZone.run(() => {
      this.checkLoginStatus();
    });
  }

  onCategoryClick(categoryName: string): void {
    console.log('Category clicked:', categoryName);
  }

  get currentPopup() {
    return this.popupService.currentPopup;
  }

  isPopupOpen() {
    return this.popupService.isPopupOpen();
  }

  openPopup(type: string) {
    this.popupService.openPopup(type);
  }

  closePopup() {
    this.popupService.closePopup();
  }

  toggleCart() {
    if (this.popupService.isCartOpen()) {
      console.log('üîπ ƒê√≥ng gi·ªè h√†ng');
      this.closePopup();
    } else {
      console.log('üîπ M·ªü gi·ªè h√†ng');
      this.openPopup('cart');
    }
  }
}




